name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v2.1.0)'
        required: true
        type: string

jobs:
  validate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run validation
        run: |
          chmod +x scripts/validate-release.sh
          ./scripts/validate-release.sh

      - name: Run tests (if available)
        run: |
          if [ -f "test_*.py" ]; then
            python -m pytest test_*.py -v
          else
            echo "No test files found, skipping tests"
          fi

  create-release:
    needs: validate-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" -10)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            
            ${{ steps.release_notes.outputs.changelog }}
            
            ## Installation
            
            ```bash
            git clone https://github.com/satux14/lms.git
            cd lms
            pip install -r requirements.txt
            python run_multi.py
            ```
            
            ## Docker
            
            ```bash
            docker-compose up -d
            ```
            
            ## Full Changelog
            
            View the complete changelog at: [CHANGELOG.md](https://github.com/satux14/lms/blob/main/CHANGELOG.md)
          draft: false
          prerelease: false

  notify-release:
    needs: create-release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Release Status
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "✅ Release ${{ github.ref_name }} created successfully!"
          else
            echo "❌ Release creation failed"
            exit 1
          fi
